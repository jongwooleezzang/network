/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.87
 * Generated at: 2024-03-21 04:59:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test06_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>JSP 8 객체</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>JSP 내장객체</h2>\r\n");
      out.write("<p>out : 브라우저에 출력할 경우 사용</p>\r\n");
      out.write("<p>request : 요청 정보를 담는 객체</p>\r\n");
      out.write("<p>response : 응답 정보를 담는 객체</p>\r\n");
      out.write("<p>session : 세션 정보를 담는 객체</p>\r\n");
      out.write("<p>application : 웹 애플리케이션 정보를 담는 객체</p>\r\n");
      out.write("<p>config : 웹 설정 정보를 담는 객체</p>\r\n");
      out.write("<p>page : 웹 페이지 정보를 담는 객체</p>\r\n");
      out.write("<p>exception : 예외 처리 정보를 담는 객체</p>\r\n");

	//Servlet에서 page 객체 생성하기
	//HttpServlet spageContext = new HttpServlet();
	//Object page = spageContext.getPage();
	
	//Servlet에서 out 객체 생성하기
	//PrintWriter out = response.getWriter();
	
	//Servlet에서 request 객체 생성하기
	//ServletRequest request = pageContext.getRequest();
	
	//Servlet에서 response 객체 생성하기
	//ServletResponse response = pageContext.getResponse();
	
	//Servlet에서 session 객체 생성하기
	//HttpSession session = pageContext.getSession();
	
	//Servlet에서 application 객체 생성하기
	//ServletContext application = pageContext.getServletContext();
	
	//Servlet에서 config 객체 생성하기
	//ServletConfig config = pageContext.getServletConfig();
	
	//Servlet에서 exception 객체 생성하기
	//Exception exception = pageContext.getException();
	
	//서블릿에서 jsp 객체 생성하기
	//JspWriter jspOut = pageContext.getOut();
	
	String name = "김기태";
	out.println("<h2>"+name+"</h2>");
	out.println("<br>");

      out.write("	\r\n");
      out.write("<h2>");
      out.print(name );
      out.write("</h2>\r\n");

	out.println("<h2>스크립트릿(Scriptlet) 내에서만 사용하는 JSP 8객체</h2>");

	JspWriter jspOut = pageContext.getOut();	//out 객체 만들기
	out.println("<h2>out(출력) : 태그를 포함한 내용을 출력할 수 있는 객체</h2>");
	out.println(jspOut == out);
	
	ServletRequest jspReq = pageContext.getRequest();
	out.println("<h2>request(요청) : 브라우저를 통하여 요청한 정보를 저장하는 객체</h2>");
	out.println(jspReq == request);
	
	ServletResponse jspRes = pageContext.getResponse();
	out.println("<h2>response(응답) : 브라우저를 통하여 반환한 결과를 저장하는 객체</h2>");
	out.println(jspRes == response);
	
	HttpSession jspSes = pageContext.getSession();
	out.println("<h2>session(세션) : 인가된 사용자 정보를 저장하는 객체</h2>");
	out.println("<h3>session(세션)은 로그아웃 전 또는 브라우저를 종료하기 전까지 그 정보가 유지된다. </h3>");
	out.println(jspSes == session);
	
	ServletContext jspApp = pageContext.getServletContext();
	out.println("<h2>application(앱) : 인가된 사용자 정보를 저장하는 객체</h2>");
	out.println("<h3>application(앱)는 브라우저 종료 전까지 그 정보가 유지된다.</h3>");
	out.println(jspApp == application);
	
	ServletConfig jspCon = pageContext.getServletConfig();
	out.println("<h2>config(설정) : 애플리케이션 설정 정보를 저장하는 객체</h2>");
	out.println(jspCon == config);
	
	Exception jspExc = pageContext.getException();
	Exception exception = pageContext.getException();
	out.println("<h2>exception(예외처리) : 예외처리 정보를 저장하는 객체</h2>");
	out.println(jspExc == exception);
	
	Object jspPage = pageContext.getPage();
	out.println("<h2>page(페이지) : 현재 페이지 정보를 저장하는 객체</h2>");
	out.println("<h3>page(페이지)는 그 정보가 현재 페이지 내에서만 정보가 유지된다.</h3>");
	
	out.println("<h3>전송된 값은 그 정보가 목적지까지만 유지되며, 다른 페이지에서는 해당 정보를 확인할 수 없음</h3>");
	out.println("<p>웹 환경에서의 Scope : 그 정보가 어디 또는 언제까지 유지</p>");
	out.println("page < trans < session < application");
	
	//application.setAttribute("sid","kkt"); -> 모든 8대 객체에 저장시는 setAttribute("필드명", "값")
	//application.getAttribute("sid"); -> 모든 8대 객체에서 값을 가져올 경우는 getAttribute("필드명") 단, request 객체의 값을 가져올 경우는 getParameter("파라미터명")을 사용한다.
	

      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("<div>\r\n");
      out.write("	<a href=\"test07.jsp\">scope(스코프) 자세히 알기</a>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
